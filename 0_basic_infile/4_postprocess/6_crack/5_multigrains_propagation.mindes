###### whether to test this input file
InputFile.debug = true

###### Init Solver
Solver.Mesh.Nx = 100
Solver.Mesh.Ny = 1
Solver.Mesh.Nz = 1

Solver.Phases = {[(Grain0),()]} 

###### Microstructure
Preprocess.Microstructure.matrix = {[(0),(Grain0),()],[()],[(0.0)]}

Preprocess.Microstructure.geometry_layer_number = 1
# .property = (phi_index, phi_name, geometry_type, rotation_gauge, reverse_region) 
#              geometry_type  : 0 - None, 1 - Ellipsoid, 2 - Polyhedron 
#              rotation_gauge : 0 - XYX, 1 - XZX, 2 - YXY, 3 - YZY, 4  - ZXZ, 5  - ZYZ 
#                               6 - XYZ, 7 - XZY, 8 - YXZ, 9 - YZX, 10 - ZXY, 11 - ZYX 
Preprocess.Microstructure.geometry_layer_0.property = (0,Grain0,1,1,false)
# .ellipsoid = [(core_x,core_y,core_z),(radius_x,radius_y,radius_z),(rotation_radian_1,rotation_radian_2,rotation_radian_3)] 
Preprocess.Microstructure.geometry_layer_0.ellipsoid = [(49.5,0,0),(0.6,0.6,0),(0,0,0)]
Preprocess.Microstructure.geometry_layer_0.phi = 1.000000
Preprocess.Microstructure.geometry_layer_0.is_normalized = TRUE
# .custom_double = [(custom_0_index, custom_0_value),(custom_1_index, custom_1_value), ...] 
Preprocess.Microstructure.geometry_layer_0.custom_double = [(0,1.0)]

# Postprocess.physical_fields = (mechanic, fluid dynamic, electric) 
Postprocess.physical_fields = (true,false,false)
# Postprocess.SolidMechanics.momentum_balance = 0 - None , 1 - Explicit , 2 - Implicit 
Postprocess.SolidMechanics.momentum_balance = 1
Postprocess.SolidMechanics.write_displacement_field = FALSE
Postprocess.SolidMechanics.max_iteration_steps = 0
Postprocess.SolidMechanics.debug = FALSE
Postprocess.SolidMechanics.strain_accuracy = 0.001000
Postprocess.SolidMechanics.solid_phases = (Grain0)
Postprocess.SolidMechanics.Stiffness.Grain0 = [(C11,C12,C12,0,0,0),(C12,C11,C12,0,0,0),(C12,C12,C11,0,0,0),(0,0,0,Gm,0,0),(0,0,0,0,Gm,0),(0,0,0,0,0,Gm)]
Postprocess.SolidMechanics.EigenStrain.Grain0 = (0,0,0,0,0,0)
Postprocess.SolidMechanics.plasticity = FALSE

# Postprocess.Crack.model = 1 - Single 
Postprocess.Crack.model = 1
Postprocess.Crack.index = 0
Postprocess.Crack.Solver.frequency = 1
Postprocess.Crack.Solver.max_iterate_steps = 1000
Postprocess.Crack.Solver.damage_threshold = 0.900000
Postprocess.Crack.Solver.crack_epsilon = 0.000100
Postprocess.Crack.Solver.dt = 0.01
Postprocess.Crack.Solver.int_width = 3.000000
# Postprocess.Crack.model = 1 - Single 
Postprocess.Crack.resistance = (1.0)


###### custom functions
Define.Var = Gm,100
Define.Var = v,0.3
Define.Var = Az,3.0
Define.Func = C12@{[v*Gm/(1-2*v)]}@
Define.Func = C11@{[(2*Gm/Az+C12<0>)]}@